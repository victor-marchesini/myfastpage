{
  
    
        "post0": {
            "title": "Informações Gerais",
            "content": "import os.path import ssl from urllib.request import urlopen from bs4 import BeautifulSoup from IPython.display import HTML, Image import dataframe_image as dfi import pandas as pd import seaborn as sns def get_last_bd_srag_csv_url(year=2021): available_years = (2020,2021) if year not in available_years: print(&#39;year not valid. Available years:&#39;,available_years) return # Se nao achar, retorna última url encontrada srag_url = f&#39;https://s3-sa-east-1.amazonaws.com/ckan.saude.gov.br/SRAG/{year}/INFLUD-29-03-2021.csv&#39; context = ssl._create_unverified_context() # To aviod ssl error html_page = urlopen(f&#39;https://opendatasus.saude.gov.br/dataset/bd-srag-{year}&#39;, context=context) soup = BeautifulSoup(html_page, features=&quot;lxml&quot;) for link in soup.findAll(&#39;a&#39;): url = link.get(&#39;href&#39;) (filename, ext) = os.path.splitext(url) if ext.lower() == &#39;.csv&#39;: srag_url = url # print(f&#39; nNew csv file url: &lt;{srag_url}&gt;&#39;) return srag_url def get_srag_data(year=2021,update=True): sep = &#39;;&#39; quotechar = &#39;&quot;&#39; fname = f&#39;dados/INFLUD{year}.csv&#39; if os.path.isfile(fname) and not update: # print(f&#39; nLendo dados do arquivo local &lt;{fname}&gt;. Se preferir baixar a última versão, usar &quot;update=True&quot;. n&#39;) df = pd.read_csv(fname,dtype=object) else: url = get_last_bd_srag_csv_url(year) print(f&#39; nBaixando dados de &lt;{url}&gt; ... &#39;, end=&#39;&#39;) df = pd.read_csv(url,sep=sep,quotechar=quotechar,dtype=object) df.to_csv(fname,index=False) # print(&#39;concluído! n&#39;) return df def get_description_df(df_srag,var_dict): df = df_srag.describe().T df[&#39;Descrição&#39;] = df.index df = df.replace({&#39;Descrição&#39;: var_dict}) df = df.rename(columns={&#39;count&#39;:&#39;Contagem&#39;, &#39;unique&#39;:&#39;Valores únicos&#39;, &#39;top&#39;:&#39;Mais frequente&#39;, &#39;freq&#39;:&#39;Maior frequência&#39;}) return df def show_table(df_desc,variables_list=None,start_index=0,rows=None,cols_left=[&#39;Descrição&#39;],width=1200): if rows: end_index = start_index + rows else: end_index = len(variables_list) if variables_list: if type(variables_list) is dict: cols = list(variables_list.keys()) elif type(variables_list) is list: cols = variables_list cols= cols[start_index:end_index] df = df_desc.loc[cols].reset_index() else: df = df_desc.reset_index() df.index = range(start_index + 1,end_index + 1) df = df.rename(columns={&#39;index&#39;:&#39;Variável&#39;}) hover_color=&quot;#006666&quot; styles = [ dict(selector=&quot;tr:hover&quot;, props=[(&quot;background-color&quot;, f&quot;{hover_color}&quot;)]), dict(selector=&quot;th&quot;, props=[(&quot;font-size&quot;, &quot;110%&quot;),(&quot;text-align&quot;, &quot;center&quot;)]), dict(selector=&quot;td&quot;, props=[(&quot;text-align&quot;, &quot;center&quot;)]) # dict(selector=f&quot;tbody .col{index}&quot;, props=[(&quot;text-align&quot;, &quot;left&quot;),(&#39;padding-left&#39;, &#39;20px&#39;)]) ] if cols_left: for col in cols_left: index = df.columns.get_loc(col) if index &gt;= 0: styles.append(dict(selector=f&quot;tbody .col{index}&quot;, props=[(&quot;width&quot;, &quot;600px&quot;),(&quot;text-align&quot;, &quot;left&quot;),(&#39;padding-left&#39;, &#39;20px&#39;)])) df_styled = df.style.set_table_styles(styles) dfi.export(df_styled, &#39;table.png&#39;,max_rows=200) image = Image(filename=&#39;table.png&#39;,width=width) return image pd.options.display.html.table_schema = True . Dimens&#245;es da base de dados . df_srag = get_srag_data(2021,False) print(f&#39; n Número de linhas: {df_srag.shape[0]} n Número de colunas: {df_srag.shape[1]} n&#39;) . Número de linhas: 421368 Número de colunas: 154 . Descri&#231;&#227;o das Vari&#225;veis . nome e tipo das variáveis (qualitativa nominal, qualitativa ordinal, quantitativa discreta, quantitativa contínua). | . Nas seções a seguir serão apresentadas as variáveis para cada tipo classificado. Além da descrição de cada variável, serão fornecidas informações referentes à contagem de valores, número de valores únicos (sem repetição), valor mais frequênte e sua frequência no conjunto de dados. . cat_nom = { &#39;AMOSTRA&#39;: &#39;Foi realizado coleta de amostra para realização de teste diagnóstico?&#39;, &#39;ANTIVIRAL&#39;: &#39;Fez uso de antiviral para tratamento da doença?&#39;, &#39;AN_ADENO&#39;: &#39;Resultado do Teste Antigênico. Adenovírus.&#39;, &#39;AN_OUTRO&#39;: &#39;Resultado do Teste Antigênico. Outro vírus respiratório.&#39;, &#39;AN_PARA1&#39;: &#39;Resultado do Teste Antigênico. Para influenza 1.&#39;, &#39;AN_PARA2&#39;: &#39;Resultado do Teste Antigênico. Para influenza 2.&#39;, &#39;AN_PARA3&#39;: &#39;Resultado do Teste Antigênico. Para influenza 3.&#39;, &#39;AN_SARS2&#39;: &#39;Resultado do Teste Antigênico. Para SARS-CoV-2.&#39;, &#39;AN_VSR&#39;: &#39;Resultado do Teste Antigênico, para VSR.&#39;, &#39;ASMA&#39;: &#39;Paciente possui Asma?&#39;, &#39;AVE_SUINO&#39;: &#39;Caso com contato direto com aves ou suínos.&#39;, &#39;CARDIOPATI&#39;: &#39;Paciente possui Doença Cardiovascular Crônica?&#39;, &#39;CLASSI_FIN&#39;: &#39;Classificação final do caso (diagnóstico).&#39;, &#39;CLASSI_OUT&#39;: &#39;Descrição de qual outro agente etiológico foi identificado (caso 3-SRAG por outra causa).&#39;, &#39;CO_MUN_NOT&#39;: &#39;Código do Município onde está localizada a Unidade Sentinela que realizou a notificação (conforme tabela IBGE).&#39;, &#39;CO_MUN_RES&#39;: &#39;Código do Município de residência do paciente (conforme tabela IBGE).&#39;, &#39;CO_MU_INTE&#39;: &#39;Código do Município onde está localizada a Unidade de Saúde onde o paciente internou (conforme tabela IBGE).&#39;, &#39;CO_PAIS&#39;: &#39;Código do país de residência do paciente.&#39;, &#39;CO_PS_VGM&#39;: &#39;Código do País de procedência do paciente.&#39;, &#39;CO_REGIONA&#39;: &#39;Código da Regional de Saúde onde está localizado o Município que realizou a notificação (conforme tabela IBGE).&#39;, &#39;CO_RG_INTE&#39;: &#39;Código da Reg onal de Saúde onde está localizado o Município de internação do paciente (conforme tabela IBGE).&#39;, &#39;CO_RG_RESI&#39;: &#39;Código da Regional de Saúde onde está localizado o Município de residência do paciente (conforme tabela IBGE).&#39;, &#39;CO_UNI_NOT&#39;: &#39;Código CNES da Unidade Sentinela que realizou o atendimento, coleta de amostra e registro do caso.&#39;, &#39;CRITERIO&#39;: &#39;Indicar qual o critério de confirmação.&#39;, &#39;CS_ETINIA&#39;: &#39;Nome e código da etnia do paciente, quando indígena.&#39;, &#39;CS_RACA&#39;: &#39;Cor ou raça declarada pelo paciente.&#39;, &#39;CS_SEXO&#39;: &#39;Sexo do paciente.&#39;, &#39;CS_ZONA&#39;: &#39;Zona geográfica do endereço de residência do paciente.&#39;, &#39;DESC_RESP&#39;: &#39;Paciente apresentou desconforto respiratório?&#39;, &#39;DIABETES&#39;: &#39;Paciente possui Diabetes mellitus?&#39;, &#39;DIARREIA&#39;: &#39;Paciente apresentou diarreia?&#39;, &#39;DISPNEIA&#39;: &#39;Paciente apresentou dispneia?&#39;, &#39;DOR_ABD&#39;: &#39;Paciente apresentou dor abdominal?&#39;, &#39;DS_AN_OUT&#39;: &#39;Nome do outro vírus respiratório identificado pelo Teste Antigênico.&#39;, &#39;DS_PCR_OUT&#39;: &#39;Nome do outro vírus respiratório identificado pelo RT-PCR.&#39;, &#39;EVOLUCAO&#39;: &#39;Evolução do caso (desfecho).&#39;, &#39;FADIGA&#39;: &#39;Paciente apresentou fadiga?&#39;, &#39;FATOR_RISC&#39;: &#39;Paciente apresenta algum fator de risco?&#39;, &#39;FEBRE&#39;: &#39;Paciente apresentou febre?&#39;, &#39;FLUASU_OUT&#39;: &#39;Outro subtipo para Influenza A.&#39;, &#39;FLUBLI_OUT&#39;: &#39;Outra linhagem para Influenza B.&#39;, &#39;GARGANTA&#39;: &#39;Paciente apresentou dor de gargante?&#39;, &#39;HEMATOLOGI&#39;: &#39;Paciente possui Doença Hematológica Crônica?&#39;, &#39;HEPATICA&#39;: &#39;Paciente possui Doença Hepática Crônica?&#39;, &#39;HISTO_VGM&#39;: &#39;Paciente tem histórico de viagem internacional até 14 dias antes do início dos sintomas?&#39;, &#39;HOSPITAL&#39;: &#39;O paciente foi internado?&#39;, &#39;ID_MN_INTE&#39;: &#39;ID do Município onde está localizado a Unidade de Saúde onde o paciente internou (conforme tabela IBGE).&#39;, &#39;ID_MN_RESI&#39;: &#39;ID do Município de residência do paciente (conforme tabela IBGE).&#39;, &#39;ID_MUNICIP&#39;: &#39;ID do Município onde está localizada a Unidade Sentinela que realizou a notificação (conforme tabela IBGE).&#39;, &#39;ID_PAIS&#39;: &#39;País de residência do paciente.&#39;, &#39;ID_REGIONA&#39;: &#39;ID da Regional de Saúde onde está localizado o Município que realizou a notificação (conforme tabela IBGE).&#39;, &#39;ID_RG_INTE&#39;: &#39;ID da Re gi onal de Saúde onde está l oca lizado o Muni cípio de i nte rnação do pa ci ente (conforme tabela IBGE).&#39;, &#39;ID_RG_RESI&#39;: &#39;ID da Regional de Saúde onde está localizado o Município de residência do paciente (conforme tabela IBGE).&#39;, &#39;ID_UNIDADE&#39;: &#39;Unidade Sentinela que realizou o atendimento, coleta de amostra e registro do caso.&#39;, &#39;IMUNODEPRE&#39;: &#39;Paciente possui Imunodeficiência ou Imunodepressão (diminuição da função do sistema imunológico)?&#39;, &#39;LO_PS_VGM&#39;: &#39;Local (cidade, estado, província e outros) onde foi rea lizada a viagem&#39;, &#39;MAE_VAC&#39;: &#39;Se paciente &lt; 6 meses, a mãe recebeu vacina?&#39;, &#39;MORB_DESC&#39;: &#39;Listar outro(s) fator(es) de risco do paciente.&#39;, &#39;M_AMAMENTA&#39;: &#39;Se paciente &lt; 6 meses, a mãe amamenta a criança?&#39;, &#39;NEUROLOGIC&#39;: &#39;Paciente possui Doença Neurológica?&#39;, &#39;NOSOCOMIAL&#39;: &#39;Trata-se decaso nosocomial (infecção adquirida no hospital)?&#39;, &#39;OBESIDADE&#39;: &#39;Paciente possui obesidade?&#39;, &#39;OUTRO_DES&#39;: &#39;Sinais e Sintomas/Outros (Descrição).&#39;, &#39;OUTRO_SIN&#39;: &#39;Paciente apresentou outro(s) sintoma(s)?&#39;, &#39;OUT_AMOST&#39;: &#39;Descrição do tipo da amostra clínica, caso diferente das listadas nas categorias do campo.&#39;, &#39;OUT_ANIM&#39;: &#39;Animal que o paciente teve contato (se selecionado a AVE_SUINO = 3-outros).&#39;, &#39;OUT_ANTIV&#39;: &#39;Se o antiviral utilizado não foi Oseltamivir ou Zanamivir, informar qual antiviral foi utilizado.&#39;, &#39;OUT_MORBI&#39;: &#39;Paciente possui outro(s) fator(es) de risco?&#39;, &#39;OUT_SOR&#39;: &#39;Descrição do tipo de Sorologia para SARS-Cov-2.&#39;, &#39;PAC_COCBO&#39;: &#39;Código da ocupação da Classificação Brasileira de Ocupações(CBO).&#39;, &#39;PAC_DSCBO&#39;: &#39;Descrição da ocupação da Classificação Brasileira de Ocupações(CBO).&#39;, &#39;PAIS_VGM&#39;: &#39;Nome do País de procedência do paciente.&#39;, &#39;PCR_ADENO&#39;: &#39;Resultado diagnóstico do RT-PCR para Adenovírus.&#39;, &#39;PCR_BOCA&#39;: &#39;Resultado diagnóstico do RT-PCR para Bocavírus.&#39;, &#39;PCR_FLUASU&#39;: &#39;Subtipo para Influenza A.&#39;, &#39;PCR_FLUBLI&#39;: &#39;Linhagem para Influenza B.&#39;, &#39;PCR_METAP&#39;: &#39;Resultado diagnóstico do RT-PCR para Metapneumovírus.&#39;, &#39;PCR_OUTRO&#39;: &#39;Resultado diagnóstico do RT-PCR para Outro vírus respiratório.&#39;, &#39;PCR_PARA1&#39;: &#39;Resultado diagnóstico do RT-PCR para influenza 1.&#39;, &#39;PCR_PARA2&#39;: &#39;Resultado diagnóstico do RT-PCR para influenza 2.&#39;, &#39;PCR_PARA3&#39;: &#39;Resultado diagnóstico do RT-PCR para influenza 3.&#39;, &#39;PCR_PARA4&#39;: &#39;Resultado diagnóstico do RT-PCR para influenza 4.&#39;, &#39;PCR_RESUL&#39;: &#39;Resultado do teste de RT-PCR/outro método por Biologia Molecular.&#39;, &#39;PCR_RINO&#39;: &#39;Resultado diagnóstico do RT-PCR para Rinovírus.&#39;, &#39;PCR_SARS2&#39;: &#39;Resultado diagnóstico do RT-PCR para SARS-CoV-2.&#39;, &#39;PCR_VSR&#39;: &#39;Resultado diagnóstico do RT-PCR para VSR.&#39;, &#39;PERD_OLFT&#39;: &#39;Paciente apresentou perda do olfato?&#39;, &#39;PERD_PALA&#39;: &#39;Paciente apresentou perda do paladar?&#39;, &#39;PNEUMOPATI&#39;: &#39;Paciente possui outra pneumopatia crônica?&#39;, &#39;POS_AN_FLU&#39;: &#39;Agente etiológico – Teste Antigênico. Positivo para Influenza?&#39;, &#39;POS_AN_OUT&#39;: &#39;Agente etiológico – Teste Antigênico. Positivo para outros vírus?&#39;, &#39;POS_PCRFLU&#39;: &#39;Resultado da RT-PCR foi positivo para Influenza?&#39;, &#39;POS_PCROUT&#39;: &#39;Resultado da RT-PCR foi positivo para outro vírus respiratório?&#39;, &#39;PUERPERA&#39;: &#39;Paciente é puérpera ou parturiente (mulher que pariu recentemente–até 45dias do parto)?&#39;, &#39;RAIOX_OUT&#39;: &#39;Resultado do RX de tórax se selecionada a opção 5-Outro.&#39;, &#39;RAIOX_RES&#39;: &#39;Resultado de Raio X de Tórax.&#39;, &#39;RENAL&#39;: &#39;Paciente possui Doença Renal Crônica?&#39;, &#39;RES_AN&#39;: &#39;Resultado do Teste Antigênico.&#39;, &#39;RES_IGA&#39;: &#39;Resultado da Sorologia para SARS-CoV-2 (IgA).&#39;, &#39;RES_IGG&#39;: &#39;Resultado da Sorologia para SARS-CoV-2 (IgG).&#39;, &#39;RES_IGM&#39;: &#39;Resultado da Sorologia para SARS-CoV-2 (IgM).&#39;, &#39;SATURACAO&#39;: &#39;Paciente apresentou saturação O2&lt;95%?&#39;, &#39;SG_UF&#39;: &#39;Unidade Federativa de residência do paciente (conforme tabela IBGE).&#39;, &#39;SG_UF_INTE&#39;: &#39;Unidade Federativa de internação do paciente (conforme tabela IBGE).&#39;, &#39;SG_UF_NOT&#39;: &#39;Unidade Federativa onde está localizada a Unidade Sentinela que realizou a notificação (conforme tabela IBGE).&#39;, &#39;SIND_DOWN&#39;: &#39;Paciente possui Síndrome de Down?&#39;, &#39;SOR_OUT&#39;: &#39;Tipo de Amostra Sorológicapara SARS-Cov-2/Outra, qual?&#39;, &#39;SUPORT_VEN&#39;: &#39;O paciente fez uso de suporte ventilatório?&#39;, &#39;SURTO_SG&#39;: &#39;Caso é proveniente de surto de SG?&#39;, &#39;TOMO_OUT&#39;: &#39;Aspecto tomografia/Outro (especificar).&#39;, &#39;TOMO_RES&#39;: &#39;Aspecto tomografia.&#39;, &#39;TOSSE&#39;: &#39;Paciente apresentou tosse?&#39;, &#39;TP_AMOSTRA&#39;: &#39;Tipo da amostra clínica coletada para o teste diagnóstico.&#39;, &#39;TP_AM_SOR&#39;: &#39;Tipo de amostra sorológicapara SARS-Cov-2.&#39;, &#39;TP_ANTIVIR&#39;: &#39;Qual antiviral utilizado?&#39;, &#39;TP_FLU_AN&#39;: &#39;Resultado do Teste Antigênico, para o tipo de Influenza.&#39;, &#39;TP_FLU_PCR&#39;: &#39;Resultado diagnóstico do RT-PCR para o tipo de Influenza.&#39;, &#39;TP_SOR&#39;: &#39;Tipo de Sorologia para SARS-Cov-2.&#39;, &#39;TP_TES_AN&#39;: &#39;Tipo do teste antigênico que foi realizado.&#39;, &#39;UTI&#39;: &#39;O paciente foi internado em UTI ?&#39;, &#39;VACINA&#39;: &#39;Recebeu vacina contra Gripe na última campanha?&#39;, &#39;VOMITO&#39;: &#39;Paciente apresentou vômito?&#39; } cat_ord = { &#39;CS_ESCOL_N&#39;: &#39;Nível de escolaridade do paciente.&#39;, &#39;CS_GESTANT&#39;: &#39;Idade gestacional da paciente.&#39;, &#39;COD_IDADE&#39;: &#39;Código referente à idade salva no sistema (TP_IDADE &amp; NU_IDADE_N)&#39;, &#39;TP_IDADE&#39;: &#39;Tipo/Idade (1-Dia, 2-Mês, 3-Ano)&#39;, &#39;NU_IDADE_N&#39;: &#39;Idade informada pelo paciente quando não se sabe a data de nascimento.&#39;, } num_disc = { &#39;SEM_NOT&#39;: &#39;Semana epidemiológica do preenchimento daficha de notificação.&#39;, &#39;SEM_PRI&#39;: &#39;Semana epidemiológica dos primeiros sintomas.&#39;, } num_cont = { &#39;OBES_IMC&#39;: &#39;Valor do IMC (Índice de Massa Corporal) do paciente calculado pelo profissional de saúde.&#39;, } dates_var = { &#39;DT_1_DOSE&#39;: &#39;Se &gt;= 6 meses e &lt;= 8 anos, data da 1ª dose para crianças vacinadas pela primeira vez.&#39;, &#39;DT_2_DOSE&#39;: &#39;Se &gt;= 6 meses e &lt;= 8 anos, data da 2ª dose para crianças vacinadas pela primeira vez.&#39;, &#39;DT_ANTIVIR&#39;: &#39;Data em que foi iniciado o tratamento com o antiviral.&#39;, &#39;DT_COLETA&#39;: &#39;Data da coleta da amostra para realização do teste diagnóstico.&#39;, &#39;DT_CO_SOR&#39;: &#39;Data da coleta do material para diagnóstico por Sorologia.&#39;, &#39;DT_DIGITA&#39;: &#39;Data de inclusão do registro no sistema.&#39;, &#39;DT_DOSEUNI&#39;: &#39;Se &gt;= 6 meses e &lt;= 8 anos, data da dose única para crianças vacinadas em campanhas de anos anteriores.&#39;, &#39;DT_ENCERRA&#39;: &#39;Data do encerramento do caso.&#39;, &#39;DT_ENTUTI&#39;: &#39;Data de entrada do paciente na Unidade de Terapia Intensiva (UTI).&#39;, &#39;DT_EVOLUCA&#39;: &#39;Data da alta ou óbito.&#39;, &#39;DT_INTERNA&#39;: &#39;Data em que o paciente foi hospitalizado.&#39;, &#39;DT_NASC&#39;: &#39;Data de nascimento do paciente.&#39;, &#39;DT_NOTIFIC&#39;: &#39;Data de preenchimento da ficha de notificação.&#39;, &#39;DT_PCR&#39;: &#39;Data do resultado RT-PCR/outro método por Biologia Molecular.&#39;, &#39;DT_RAIOX&#39;: &#39;Se realizou RX de Tórax, especificar a data do exame.&#39;, &#39;DT_RES&#39;: &#39;Data do resultado do teste sorológico.&#39;, &#39;DT_RES_AN&#39;: &#39;Data do resultado do teste antigênico.&#39;, &#39;DT_RT_VGM&#39;: &#39;Data em que retornou de viagem.&#39;, &#39;DT_SAIDUTI&#39;: &#39;Data em que o paciente saiu da Unidade de Terapia Intensiva (UTI).&#39;, &#39;DT_SIN_PRI&#39;: &#39;Data de primeiros sintomas.&#39;, &#39;DT_TOMO&#39;: &#39;Data da tomografia.&#39;, &#39;DT_UT_DOSE&#39;: &#39;Data da última dose de vacina contra gripe que o paciente tomou.&#39;, &#39;DT_VAC_MAE&#39;: &#39;Se a mãe recebeu vacina, qual a data?&#39;, &#39;DT_VGM&#39;: &#39;Data em que foi realizada a viagem.&#39;, } var_dict = {**cat_nom, **cat_ord, **num_disc, **num_cont, **dates_var} df_desc = get_description_df(df_srag,var_dict) . &lt;div style=”page-break-after: always;”&gt;&lt;/div&gt; . Vari&#225;veis qualitativas nominais . print(f&#39; nNúmero de variáveis: {len(cat_nom)} n n&#39;) . Número de variáveis: 122 . start_index = 0 rows = 20 show_table(df_desc,cat_nom,start_index,rows) . start_index += rows rows = 50 show_table(df_desc,cat_nom,start_index,rows) . start_index += rows show_table(df_desc,cat_nom,start_index,rows=None) . A seguir, um exemplo de historama para a variável &#39;PAIS_VGM&#39; (Nome do País de procedência do paciente.): . col = &#39;PAIS_VGM&#39; x = df_srag[[col]]#.astype(float) x values_cols = &#39;DT_SIN_PRI&#39; x = df_srag.groupby(by=col)[values_cols].count().sort_values(ascending=True) ax = x.plot.barh() . &lt;AxesSubplot:ylabel=&#39;PAIS_VGM&#39;&gt; . &lt;div style=”page-break-after: always;”&gt;&lt;/div&gt; . Vari&#225;veis qualitativas ordinais . print(f&#39; nNúmero de variáveis: {len(cat_ord)} n n&#39;) show_table(df_desc,cat_ord) . Número de variáveis: 5 . A seguir, um exemplo de historama para a variável &#39;CS_ESCOL_N&#39; (Nível de escolaridade do paciente): . col = &#39;CS_ESCOL_N&#39; x = df_srag[col].astype(float) ax = sns.histplot(data=x,discrete=False) . Vari&#225;veis quantitativas discretas . print(f&#39; nNúmero de variáveis: {len(num_disc)} n n&#39;) show_table(df_desc,num_disc) . Número de variáveis: 2 . A seguir, um exemplo de historama para a variável &#39;SEM_PRI&#39; (Semana epidemiológica dos primeiros sintomas): . col = &#39;SEM_PRI&#39; x = df_srag[col].astype(int) ax = sns.histplot(data=x,discrete=True) . Vari&#225;veis quantitativas cont&#237;nuas . print(f&#39; nNúmero de variáveis: {len(num_cont)} n n&#39;) show_table(df_desc,num_cont) . Número de variáveis: 1 . A seguir, um exemplo de historama para a variável &#39;OBES_IMC&#39; (Valor do Índice de Massa Corporal do paciente calculado pelo profissional de saúde): . col = &#39;OBES_IMC&#39; x = df_srag[col].str.replace(&#39;,&#39;,&#39;.&#39;).astype(float) ax = sns.histplot(data=x,discrete=False) . Vari&#225;veis de datas . Existem 24 variǘeis com informações referentes a datas. Acredito que essas variáveis possuem características um pouco diferentes das demais, por isso achei que seria interessante criar uma &quot;subcategoria&quot;. Segundo minha interpretação, as variáveis do tipo data podem ser classificadas em tipos diferentes, a depender da análise que será realizada. A princípio, trataremos essas variáveis como numéricas, ou seja, como uma medida do tempo em que determinado evento ocorreu. . Além disso, apesar das datas se referirem apenas a dias &quot;inteiros&quot;, como as séries analisadas são muito extensas, algumas com milhares de datas, trataremos essas variáveis como contínua. Por isso, entendemos que a melhor classificação para essas seria como &quot;variáveis quantitativas contínuas&quot;. . print(f&#39; nNúmero de variáveis: {len(dates_var)} n n&#39;) show_table(df_desc,dates_var) . Número de variáveis: 24 . A seguir, um exemplo de historama para a variável &#39;DT_NASC&#39; (Data de nascimento do paciente): . col = &#39;DT_NASC&#39; x = pd.to_datetime(df_srag[col], errors=&#39;coerce&#39;,dayfirst=True) ax = sns.histplot(data=x,discrete=False) . Missing Data . há missing data? quantos? em quais variáveis? | . df = df_desc.copy() df[&#39;Missing&#39;] = df_srag.shape[0] - df[&#39;Contagem&#39;] cols = list(df.columns) cols = cols[-1:] + cols[:-1] df = df[cols] # df = df[[&#39;missing&#39;]] df = df.query(&#39;Missing &gt; 0&#39;) df = df.sort_values(by=&#39;Missing&#39;,ascending=False) print(f&#39; nNúmero de variáveis com missing values: {len(df)} n n&#39;) . Número de variáveis com missing values: 134 . start_index = 0 rows = 40 show_table(df,list(df.index),start_index,rows) . start_index += rows rows = 60 show_table(df,list(df.index),start_index,rows) . start_index += rows show_table(df,list(df.index),start_index) . # import seaborn as sns # col = list(cols)[11] # df[col] = pd.to_datetime(df[col], errors=&#39;coerce&#39;,dayfirst=True) # print(df[col].nunique()) # # df[col].count() # x = df.groupby(by=col)[[&#39;DT_NOTIFIC&#39;]].count().reset_index() # xmin = max(pd.to_datetime(&#39;2021-01-01&#39;),df[col].min()) # xmax = min(pd.to_datetime(&#39;2021-04-01&#39;),df[col].max()) # x = x.loc[x[col]&gt;=xmin] # x = x.loc[x[col]&lt;=xmax] # x.plot.scatter(x=col,y=&#39;DT_NOTIFIC&#39;,xlim = (xmin,xmax)) # # x # # sns.histplot(data=x,x=col)#,y=&#39;DT_NOTIFIC&#39;) . import PyPDF2 import glob import pathlib # substitui a os.path import sys #from tika import parser def read_pdf_text_contents(file_name): page_content = &quot;&quot; read_pdf = PyPDF2.PdfFileReader(file_name) for page in read_pdf.pages: page_content += page.extractText() return page_content def find_strings(fileName,key_strings): content = read_pdf_text_contents(fileName) if content.strip(): for key_string in key_strings: if key_string in content: return(&#39;Bingo!&#39;) ## if not found return(&#39;Strings não encontradas.&#39;) else: return(&#39;Nenhum texto lido: avaliar imagem.&#39;) # sep_key = &#39;$$$&#39; # str_file = file_content.replace(&#39; n&#39;,&#39;&#39;) # key = df_srag.columns[0] # out_str = &#39;&#39; # words = file_content.split() # for word in words: # if word in df_srag.columns: # word += sep_key # out_str += word + &#39; &#39; # # for key in df_srag.columns: # # words = file_content.split() # # str_file = str_file.replace(key,key+sep_key) # # print(key+sep_key) # lines = str_file.split(sep_key) # len(lines) # # lines[:] # # file_content # words = file_content.split() # key in words#.find(key) # # key # lines = out_str.split(sep_key) # len(lines) # lines[9] . df_head = df_srag.head(1000) fname = &#39;victormarchesini_dataset1_amostra.csv&#39; df_head.to_csv(fname,index=False) . # ## Is time nominal, ordinal, interval or ratio? Is it categorical or continuous? # https://statisticalanalysisconsulting.com/is-time-nominal-ordinal-interval-or-ratio-is-it-categorical-or-continuous/ # ## What is the difference between ordinal, interval and ratio variables? Why should I care? # https://www.graphpad.com/support/faq/what-is-the-difference-between-ordinal-interval-and-ratio-variables-why-should-i-care/ .",
            "url": "https://victor-marchesini.github.io/myfastpage/2021/04/07/USP_EAH5002_dataset1.html",
            "relUrl": "/2021/04/07/USP_EAH5002_dataset1.html",
            "date": " • Apr 7, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://victor-marchesini.github.io/myfastpage/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://victor-marchesini.github.io/myfastpage/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://victor-marchesini.github.io/myfastpage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://victor-marchesini.github.io/myfastpage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}